function Node(val){
  this.value = val;
  this.left = null;
  this.right = null;
}
function BinarySearchTree(){
  this.root = null;
}
BinarySearchTree.prototype.push = function(val){
   var root = this.root;

   if(!root){
      this.root = new Node(val);
      return;
   }

   var currentNode = root;
   var newNode = new Node(val); 

   while(currentNode){
      if(val < currentNode.value){
          if(!currentNode.left){
             currentNode.left = newNode;
             break;
          }
          else{
             currentNode = currentNode.left;
        }
     }
     else{
         if(!currentNode.right){
            currentNode.right = newNode;
            break;
         }
         else{
            currentNode = currentNode.right;
         }
     }
  }

}
BinarySearchTree.prototype.checkHeights = function(root){
	if(!root)	
  	return
	let q = []
  let r = []
  root.left && q.push(root.left)
  root.right && r.push(root.right)
  let lh = 0
  let rh = 0
  while( q.length != 0 || r.length != 0){
  if(Math.abs(lh-rh) >= 1){
    return false
  }
  console.log(lh,rh)
  let count = q.length
  console.log(q[0],'q')
  count && lh++
  for(i=0;i<count;i++){
    q[0].left && q.push(q[0].left)
    q[0].right && q.push(q[0].right)
    q.shift()
  	}
  count = r.length
  console.log(r[0],'r')
  count && rh++
  for(i=0;i<count;i++){
  	r[0].left && r.push(r[0].left)
    r[0].right && r.push(r[0].right)
    r.shift()
  }
 }
  
  return true
}
var bst = new BinarySearchTree();
bst.push(3);
bst.push(2);
bst.push(4);
bst.push(1);
bst.push(5);
bst.push(7)
console.log(bst)
console.log(bst.checkHeights(bst.root))

