
function BinarySearchTree(){
  this.root = null;
}
function Node(val){
  this.value = val;
  this.left = null;
  this.right = null;
}
BinarySearchTree.prototype.push = function(val){
   var root = this.root;

   if(!root){
      this.root = new Node(val);
      return;
   }

   var currentNode = root;
   var newNode = new Node(val); 

   while(currentNode){
      if(val < currentNode.value){
          if(!currentNode.left){
             currentNode.left = newNode;
             break;
          }
          else{
             currentNode = currentNode.left;
        }
     }
     else{
         if(!currentNode.right){
            currentNode.right = newNode;
            break;
         }
         else{
            currentNode = currentNode.right;
         }
     }
  }

}
var bst = new BinarySearchTree();
bst.push(3);
bst.push(2);
bst.push(4);
bst.push(1);
bst.push(5);
function isbal(root){
	let flag = false
  let isbal = true
  let q = []
  q[0] = root
  q[1] = null
  while(q.length && q[0] !== null && isbal){
  	while(q[0] != null) {
    	console.log(q[0].value)
      if(flag && (q[0].left || q[0].right)) {
      	isbal = false
        break
      }
      if(q[0].right && !q[0].left) {
      	isbal = false
        break
      }
      if(q[0].left && !q[0].right) {
      	flag = true
      }
      
    	q[0].left && q.push(q[0].left)
    	q[0].right && q.push(q[0].right)
    	q.shift()
    }
    q.push(null)
    q.shift()
  }
  console.log(isbal)
}
console.log(bst)
isbal(bst.root)
